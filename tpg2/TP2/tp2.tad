

TAD fichin
	Igualdad Observacional:();
	Géneros: fichin
	Exporta: fichin, observadores, generadores, 
	Usa: Bool, Nat
	
	Observadores Básicos:
		partidaEnCurso: fichin -> bool 
		partida: fichin -> partida { partidaEnCurso(f) }
		ranking: fichin -> dicc(nombre, nat)
		nombreJugador: fichin -> nombre { partidaEnCurso(f) }
		
	Generadores:
		iniciarFichin:			-> fichin
		iniciarPartida: fichin × partida × nombre -> fichin { ¬partidaEnCurso(f) ∧ partidaRecienComenzada(p) }
		moverF: fichin × dirección -> fichín { partidaEnCurso(f) ∧L movimientoValido(partida(f), d) }
		
	Otras Operaciones:
		mejorPuntajeDelJugador: fichin -> nat { partidaEnCurso(f) ∧ jugadorEnRanking(f, n)}
		proximoMejorPuntaje: fichin -> nat { partidaEnCurso(f) ∧ ¬vacío(claves(ranking(f))) ∧L jugadorEnRanking(f) ∧L ¬jugadorPrimero(f) }
		nombreDelProximo: fichin -> nombre { partidaEnCurso(f) ∧ ¬vacío(claves(ranking(f))) ∧L jugadorEnRanking(f) ∧L ¬jugadorPrimero(f) }
		jugadorEnRanking: fichin -> bool { partidaEnCurso(f) }
		jugadorPrimero: fichin -> bool { partidaEnCurso(f) }
		siguienteClaveMayor: dicc d × nat -> α { ¬vacío?(claves(d)) }
		mayorClave: dicc d -> α { ¬vacío?(claves(d)) }
		
	Axiomas:
  	partidaEnCurso(iniciarFichin) ≡ false
		partidaEnCurso(iniciarPartida(f, p, n)) ≡ ¬terminóElJuego?(p)
		partidaEnCurso(moverF(f, d)) ≡ ¬terminóElJuego(mover(partida(f), d))
		
		partida(iniciarPartida(f, p, n)) ≡ p
		partida(moverF(f, d)) ≡ mover(partida(f), d)
		
		ranking(iniciarFichin) ≡ vacío
		ranking(iniciarPartida(f, p, n)) ≡ ranking(f)
		ranking(moverF(f, d)) ≡ if ganó?(partida(moverF(f, d))) ∧ (¬jugadorEnRanking(f) ∨L mejorPuntajeDelJugador(f) < puntaje(partida(moverF(f, d))))
															then definir(nombreJugador(f), puntaje(partida(moverF(f, d))))
															else ranking(f) fi
		
		
		nombreJugador(iniciarPartida(f, p, n)) ≡ n
		nombreJugador(moverF(f, d)) ≡ nombreJugador(f)
		
		mejorPuntajeDelJugador(f) ≡ obtener(nombreJugador(f), ranking(f))
		
		proximoMejorPuntaje(f) ≡ obtener(nombreDelProximo(f), ranking(f))
		
		nombreDelProximo(f) ≡ siguienteClaveMayor(nombreJugador(f), ranking(f), mejorPuntajeDelJugador(f)) // es lo mismo
		
		siguienteClaveMayor(r, m) ≡ if #(claves(r)) = 1  // si no es el primero, siempre hay uno mejor
																	then
																		dameUno(claves(r))
																	else
																		if m < obtener(dameUno(claves(r)), r) ∧ obtener(dameUno(claves(r)), r) < siguienteClaveMayor(borrar(dameUno(claves(r)), r)), m) 
																			then
																				dameUno(r)
																			else
																				siguienteClaveMayor(borrar(dameUno(claves(r)), r)), m)
																		fi
																 fi
		
		jugadorEnRanking(f, n) ≡ def?(jugador(f), ranking(f))
		
		mayorClave(r) ≡ if #(claves(r)) = 1
										 then
											 dameUno(claves(r))
										 else
											 if mayorClave(sinUno(r)) < obtener(dameUno(claves(r)))
												then
												 dameUno(r)
												else
												 mayorClave(sinUno(r))
											 fi
										fi

		jugadorPrimero(f) ≡ mayorClave(ranking(f)) = nombreJugador(f)
		
Fin TAD


// TAD Dirección
// 	Igualdad Observacional:
// 			(∀d₁, d₂: dirección)(d₁ =obs d₂ ⇐⇒ asNat(d₁) = asNat(d₂));
// 	Géneros: dirección
// 	Exporta: dirección, generadores,
// 	Usa: Bool, Nat
// 	Observadores Básicos:
// 		asNat: dirección -> nat
// 	Generadores:
// 		arr: -> dirección
// 		abj: -> dirección
// 		izq: -> dirección
// 		der: -> dirección
// 	Otras Operaciones:
// 		• = • : dirección × dirección -> bool
// 	Axiomas: ∀ d₁, d₂ : dirección
// 		asNat(arr) ≡ 1 
// 		asNat(abj) ≡ 2 
// 		asNat(izq) ≡ 3 
// 		asNat(der) ≡ 4
// 		a₁ = a₂ ≡ asNat(a₁) = asNat(a₂)
// 		
// 	Fin TAD
  o7
 /|
 / \
 
Fin TAD

TAD Tupla(Nat, Nat) EXTIENDE Tupla(α₁,..., α\_n)
Otras Operaciones:
	• = • : tupla(nat, nat) × tupla(nat, nat) -> bool
	mover: tuple(nat, nat) × dirección -> tupla(nat, nat)
Axiomas: ∀a, a₁, a₂: tupla(nat, nat)
	a₁ = a₂ ≡ π₁(a₁) = π₁(a₂) ∧ π₂(a₁) = π₂(a₂)
	moverT(a, d) ≡ if d = "arr" then <π₁(a), π₂(a)+1> else
								 if d = "abj" then <π₁(a), π₂(a)-1> else
								 if d = "izq" then <π₁(a)-1. π₂(a)>
							  else <π₁(a)+1, π₂(a)> fi fi fi 
Fin TAD

TAD Mapa
	
	géneros:	mapa
	
	exporta:	observadores
	
	usa:		NAT, BOOL, COORDENADAS, DIMENSION, CONJUNTO(α)

	igualdad observacional:
		(∀ m,m':mapa)(m =obs m' ↔ dimensión(m) =obs dimensión(m') ∧
								paredes(m) =obs paredes(m') ∧
								fantasmas(m) =obs fantasmas(m') ∧
								puntoDeSalida(m) =obs puntoDeSalida(m') ∧
								puntoDeLlegada(m) =obs puntoDeLlegada(m'))
	
    observadores:
        dimensión      : mapa -> dimensión
        paredes        : mapa -> conj(coordenadas)
        fantasmas      : mapa -> conj(coordenadas)
        puntoDeSalida  : mapa -> coordenadas
        puntoDeLlegada : mapa -> coordenadas

    generadores:
        nuevoMapa       : dimensión d × coordenadas inicio × coordenadas fin -> mapa 	{π₁(d) * π₂(d) ≥ 2
																						 ∧ ¬(π₁(inicio) = π₁(fin) ∧ π₂(inicio) = π₂(fin))
																						 ∧ enRango?(inicio, d)
																						 ∧ enRango?(fin, d)}
        agregarPared    : mapa m x coordenadas c -> mapa		{enRango?(c, dimension(m)) ∧ ¬estaOcupado?(c, m)}																						 
        agregarFantasma : mapa m x coordenadas c -> mapa		{enRango?(c, dimension(m)) ∧ ¬estaOcupado?(c, m)}


	otras operaciones:
		enRango? : coordenadas × dimensión -> bool
		estaOcupado? : coordenadas c × mapa m -> bool                    { enRango?(c, dimension(m)) }
		
	axiomas:
		dimensión(nuevoMapa(d, i, f)) ≡ d
		dimensión(agregarFantasma(m, c)) ≡ dimensión(m)
		dimensión(agregarPared(m, c)) ≡ dimensión(m)
		
		paredes(nuevoMapa(d, i, f)) ≡ Ø
		paredes(agregarFantasma(m, c)) ≡ paredes(m)
		paredes(agregarPared(m, c)) ≡ Ag(c, paredes(m))
		
		fantasmas(nuevoMapa(d, i, f)) ≡ Ø
		fantasmas(agregarFantasma(m, c)) ≡ Ag(c, fantasmas(m))
		fantasmas(agregarPared(m, c)) ≡ fantasmas(m)
		
		puntoDeSalida(nuevoMapa(d, i, f)) ≡ i
		puntoDeSalida(agregarFantasma(m, c)) ≡ puntoDeSalida(m)
		puntoDeSalida(agregarPared(m, c)) ≡ puntoDeSalida(m)
		
		puntoDeLlegada(nuevoMapa(d, i, f)) ≡ f
		puntoDeLlegada(agregarFantasma(m, c)) ≡ puntoDeLlegada(m)
		puntoDeLlegada(agregarPared(m, c)) ≡ puntoDeLlegada(m)
		
		enRango?(c,d) ≡ π₁(c) < π₁(d) ∧ π₂(c) < π₂(d)

		estaOcupado(c, m) ≡ ¬(c ∈ paredes(m) ∨ c ∈ fantasmas(m) ∨ c ∈ {puntoDeLlegada(m)} ∨ c ∈ {puntoDeLlegada(m)})
	
Fin TAD

TAD Dirección es String

TAD Partida
	
	géneros: partida
	
	usa: MAPA, COORDENADAS, BOOL, CONJUNTO(α), NAT, DIMENSION
	
	igualdad observacional:
		(∀ p,p':partida)(p =obs p' ↔ jugador(p) =obs jugador(p') ∧
								     mapa(p) =obs mapa(p') ∧
									 chocolates(p) =obs chocolates(p') ∧
									 movimientosConInmunidad(p) =obs movimientosConInmunidad(p') ∧
									 puntaje(p) =obs puntaje(p'))
	
    observadores:
		jugador                 : partida -> coordenadas
		mapa                    : partida -> mapa
		chocolates              : partida -> conj(coordenadas)
		movimientosConInmunidad : partida -> nat
		puntaje                 : partida -> nat

    generadores:
		iniciarPartida   : mapa m × conj(coordenadas) chocolates -> partida
																								{(∀choco : coordenadas)(choco ∈ chocolates ⇒
																									  	enRango?(choco, dimension(m)) ∧L ¬(choco ∈ {puntoDeSalida(m)} ∨ choco ∈ paredes(m)))}
																											// AGREGAR RESTRICCION CAMINO FELIZ
																												// Existe un subconjunto del conjunto de espacios vacios en los que no se asusta el jugador
																												// y que sean contiguos y que contenga al punto de inicio y 
	  mover            : partida p × dirección d -> partida { movimientoValido(p, d) }
//		arriba           : partida p -> partida		  {¬terminóElJuego(p) ∧ enRango?(x, y+1, dimensión(mapa(p))) ∧ ¬(⟨x,y+1⟩ ∈ paredes(mapa(p)))}
//		abajo            : partida p -> partida		  {¬terminóElJuego(p) ∧ enRango?(x, y-1, dimensión(mapa(p))) ∧ ¬(⟨x,y-1⟩ ∈ paredes(mapa(p)))}
//		derecha          : partida p -> partida	 	  {¬terminóElJuego(p) ∧ enRango?(x+1, y, dimensión(mapa(p))) ∧ ¬(⟨x+1,y⟩ ∈ paredes(mapa(p)))}
//		izquierda        : partida p -> partida	 	  {¬terminóElJuego(p) ∧ enRango?(x-1, y, dimensión(mapa(p))) ∧ ¬(⟨x-1,y⟩ ∈ paredes(mapa(p)))}
													  // Llamo x: π₁(jugador(p)) e y: π₂(jugador(p))

    otras operaciones:
		seAsustó?       : partida -> bool
		ganó?           : partida -> bool
		terminóElJuego? : partida -> bool
		hayFantasmasCerca : coordenadas × conj(coordenadas) -> bool
		partidaRecienComenzada : partida -> bool
	   
	axiomas:
  	jugador(iniciarPartida(m, c)) ≡ puntoDeSalida(m)
		jugador(mover(p, d)) ≡ moverT(jugador(p), d)
//	  jugador(arriba(p)) ≡ ⟨π₁(jugador(p)), π₂(jugador(p))+1⟩
//  	jugador(abajo(p)) ≡ ⟨π₁(jugador(p)), π₂(jugador(p))-1⟩
//  	jugador(derecha(p)) ≡ ⟨π₁(jugador(p))+1, π₂(jugador(p))⟩
//   	jugador(izquierda(p)) ≡ ⟨π₁(jugador(p))-1, π₂(jugador(p))⟩
		
		mapa(iniciarPartida(m, c)) ≡ m
		mapa(mover(p, d)) ≡ mapa(p)
//		mapa(arriba(p)) ≡ mapa(p)
//		mapa(abajo(p)) ≡ mapa(p)
//		mapa(derecha(p)) ≡ mapa(p)
//		mapa(izquierda(p)) ≡ mapa(p)

		chocolates(iniciarPartida(m, c)) ≡ c
		chocolates(mover(p, d)) ≡ chocolates(p) - {jugador(mover(p, d))}
//		chocolates(arriba(p)) ≡ chocolates(p) - {jugador(arriba(p))} // se puede hacer con sinUno, pero no se si es correcto (sabemos cual desaparece)
//		chocolates(abajo(p)) ≡ chocolates(p) - {jugador(abajo(p))} // no necesariamente elimina chocolates
//		chocolates(izquierda(p)) ≡ chocolates(p) - {jugador(izquierda(p))} // si no hay chocolate, devuelve el mismo conjunto
//		chocolates(derecha(p)) ≡ chocolates(p) - {jugador(derecha(p))}

		movimientosConInmunidad(iniciarPartida(m, c)) ≡ 0 // interpretamos que los movimientos no son acomulativos sino que se recargan
		movimientosConInmunidad(mover(p, d)) ≡ if jugador(mover(p, d)) ∈ chocolates(p)
																							then 10
																							else max(0, movimientosConInmunidad(p) - 1) // ACLARAR SOBRE NUMEROS NEGATIVOS
																						fi
//		movimientosConInmunidad(arriba(p)) ≡ if jugador(arriba(p)) ∈ chocolates(p)
//											  then 10
//											  else max(0, movimientosConInmunidad(p) - 1) // ACLARAR SOBRE NUMEROS NEGATIVOS
//											fi
//		movimientosConInmunidad(abajo(p)) ≡ if jugador(abajo(p)) ∈ chocolates(p)
//											  then 10
//											  else max(0, movimientosConInmunidad(p) - 1)
//											fi
//		movimientosConInmunidad(izquierda(p)) ≡ if jugador(izquierda(p)) ∈ chocolates(p)
//											 	 then 10
//											 	 else max(0, movimientosConInmunidad(p) - 1)
//												fi
//		movimientosConInmunidad(derecha(p)) ≡ if jugador(derecha(p)) ∈ chocolates(p)
//											   then 10
//											   else max(0, movimientosConInmunidad(p) - 1)
//											  fi
		
		puntaje(iniciarPartida(m, c)) ≡ 0
		puntaje(mover(p, d)) ≡ puntaje(p) + 1
//		puntaje(arriba(p)) ≡ puntaje(p) + 1
//		puntaje(abajo(p)) ≡ puntaje(p) + 1
//		puntaje(izquierda(p)) ≡ puntaje(p) + 1
//		puntaje(derecha(p)) ≡ puntaje(p) + 1

		seAsustó?(p) ≡ hayFantasmasCerca(jugador(p), fantasmas(mapa(p))) ∧ movimientosConInmunidad(p) = 0
		ganó?(p) ≡ jugador(p) ∈ {puntoDeLlegada(mapa(p))}
		terminóElJuego?(p) ≡ seAsustó(p) ∨ ganó(p)
		movimientoValido(p, d) ≡ d ∈ {"arr", "abj", "izq", "der"} ∧L ¬terminóElJuego(p) ∧ enRango?(moverT(d, jugador(p)), dimension(mapa(p))) ∧ ¬(moverT(d, jugador(p)) ∈ paredes(mapa(p)))
		
		hayFantasmasCerca(⟨x,y⟩,f) ≡ if vacío?(f) then false
		 					         else |x-π₁(dameUno(f))| + |y-π₂(dameUno(f))| < 3
								     ∨ hayFantasmasCerca(⟨x,y⟩, sinUno(f))
										 
		partidaRecienComenzada(p) ≡ puntaje(p) = 0

Fin TAD
